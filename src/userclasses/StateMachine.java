/**
 * Your application code goes here<br>
 * This file was generated by <a href="https://www.codenameone.com/">Codename
 * One</a> for the purpose of building native mobile applications using Java.
 */
package userclasses;

import ca.weblite.codename1.json.JSONException;
import ca.weblite.codename1.json.JSONObject;
import com.codename1.codescan.CodeScanner;
import com.codename1.codescan.ScanResult;
import com.codename1.components.InfiniteProgress;
import com.codename1.components.ToastBar;
import com.codename1.io.ConnectionRequest;
import com.codename1.io.JSONParser;
import com.codename1.io.NetworkManager;
import com.codename1.io.Preferences;
import generated.StateMachineBase;
import com.codename1.ui.*;
import com.codename1.ui.events.*;
import com.codename1.ui.util.Resources;
import eg.eed.checkin.API;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.Hashtable;
import java.util.Map;

/**
 *
 * @author Your name here
 */
public class StateMachine extends StateMachineBase {

    public static String QR, day;
    public static String name, mobile, workshop, coupon, email, edu, vDay, gender, birth, isHeIn;

    public StateMachine(String resFile) {
        super(resFile);
        // do not modify, write code in initVars and initialize class members there,
        // the constructor might be invoked too late due to race conditions that might occur
    }

    /**
     * this method should be used to initialize variables instead of the
     * constructor/class scope to avoid race conditions
     */
    protected void initVars(Resources res) {
    }

    @Override
    protected void onMain_CheckAction(Component c, ActionEvent event) {

        CodeScanner.getInstance().scanQRCode(new ScanResult() {

            public void scanCompleted(String contents, String formatName, byte[] rawBytes) {

                try {
                    QR = contents;
                    ConnectionRequest req = new ConnectionRequest() {
                        @Override
                        protected void handleErrorResponseCode(int code, String message) {
                        }
                    };
                    req.setPost(false);
                    req.setHttpMethod("GET");
                    req.setReadResponseForErrors(true);
                    req.setUrl(API.VISITOR + "&id=" + contents);
                    req.setDisposeOnCompletion(new InfiniteProgress().showInifiniteBlocking());

                    NetworkManager.getInstance().addToQueueAndWait(req);

                    Map<String, Object> response = new JSONParser().parseJSON(new InputStreamReader(new ByteArrayInputStream(req.getResponseData()), "UTF-8"));

                    if (response.get("message") != null) {

                        Dialog.show("Error", response.get("message").toString(), "OK", null);
                    } else if (response.get("name") != null) {

                        name = response.get("name").toString();
                        email = response.get("email").toString();
                        workshop = (response.get("workshop") == null) ? "-" : response.get("workshop").toString();
                        mobile = response.get("mobile").toString();
                        coupon = (response.get("coupon") == null) ? "-" : response.get("coupon").toString();
                        edu = response.get("education").toString();
                        vDay = response.get("day").toString();
                        gender = (response.get("gender").toString().equals("0")) ? "Female" : "Male";
                        birth = response.get("birthdate").toString();
                        isHeIn = response.get("isHeIn").toString();
                        showForm("Visitor", null);
                    } else {
                        Dialog.show("Error", "Not found", "OK", null);
                    }
                } catch (Exception ex) {
                    Dialog.show("Error", "Connection failure", "OK", null);
                    System.out.println(ex.toString());
                }
            }

            public void scanCanceled() {
                ToastBar.showErrorMessage("cancelled");

            }

            public void scanError(int errorCode, String message) {
                ToastBar.showErrorMessage("err " + message);

            }
        });

    }

    @Override
    protected void onMain_CheckInAction(Component c, ActionEvent event) {
        CodeScanner.getInstance().scanQRCode(new ScanResult() {

            public void scanCompleted(String contents, String formatName, byte[] rawBytes) {

                checkReq(0, contents, day);
            }

            public void scanCanceled() {
                ToastBar.showErrorMessage("cancelled");

            }

            public void scanError(int errorCode, String message) {
                ToastBar.showErrorMessage("err " + message);

            }
        });

    }

    public void checkReq(int type, String id, String day) {

        try {
            ConnectionRequest req = new ConnectionRequest() {
                @Override
                protected void handleErrorResponseCode(int code, String message) {
                }
            };
            req.setPost(false);
            req.setHttpMethod("GET");
            req.setReadResponseForErrors(true);
            req.setUrl(((type == 1) ? API.CHECKOUT : API.CHECKIN) + "&id=" + id + "&day=" + day);
            req.setDisposeOnCompletion(new InfiniteProgress().showInifiniteBlocking());

            NetworkManager.getInstance().addToQueueAndWait(req);
            Map<String, Object> response = new JSONParser().parseJSON(new InputStreamReader(new ByteArrayInputStream(req.getResponseData()), "UTF-8"));

            if (response.get("message") != null) {
                Dialog.show("Error", response.get("message").toString(), "OK", null);
            } else {

                String limits = response.get("limits").toString();
                int c = limits.indexOf("current");
                String ll = limits.substring(c);
                int e = ll.indexOf(",");
                boolean b = Dialog.show("Success", ll.substring(0, e), "ok", (type == 3) ? "newQR" : null);
                if (b) {
                    showForm("Main", null);
                } else {
                    newQr();
                }

            }

        } catch (Exception ex) {
            Dialog.show("Error", "Connection failure", "OK", null);
            System.out.println(ex.toString());
        }
    }

    @Override
    protected void onMain_CheckOutAction(Component c, ActionEvent event) {
        CodeScanner.getInstance().scanQRCode(new ScanResult() {

            public void scanCompleted(String contents, String formatName, byte[] rawBytes) {

                checkReq(1, contents, day);
            }

            public void scanCanceled() {
                ToastBar.showErrorMessage("cancelled");

            }

            public void scanError(int errorCode, String message) {
                ToastBar.showErrorMessage("err " + message);

            }
        });

    }

    public void newQr() {

        CodeScanner.getInstance().scanQRCode(new ScanResult() {

            public void scanCompleted(String contents, String formatName, byte[] rawBytes) {

                try {
                    // ToastBar.showErrorMessage(contents + "////" + QR);
                    ConnectionRequest req = new ConnectionRequest() {
                        @Override
                        protected void handleErrorResponseCode(int code, String message) {
                        }
                    };
                    req.setPost(false);
                    req.setHttpMethod("GET");
                    req.setReadResponseForErrors(true);
                    req.setUrl(API.NEWQR + "&id=" + QR + "&day=" + day + "&newQR=" + contents);
                    req.setDisposeOnCompletion(new InfiniteProgress().showInifiniteBlocking());

                    NetworkManager.getInstance().addToQueueAndWait(req);
                    Map<String, Object> response = new JSONParser().parseJSON(new InputStreamReader(new ByteArrayInputStream(req.getResponseData()), "UTF-8"));

                    if (response.get("message") != null) {
                        Dialog.show("Error", response.get("message").toString(), "OK", null);
                    } else if (Dialog.show("Success", "Done", "CheckIn", "Return")) {
                        checkReq(0, QR, day);
                    }

                } catch (Exception ex) {
                    Dialog.show("Error", "Connection failure", "OK", null);
                    System.out.println(ex.toString());
                }

            }

            public void scanCanceled() {
                ToastBar.showErrorMessage("cancelled");

            }

            public void scanError(int errorCode, String message) {
                ToastBar.showErrorMessage("err " + message);

            }
        });

    }

    @Override
    protected void onMain_Button1Action(Component c, ActionEvent event) {

        try {
            String tMobile = findMobile().getText();
            ConnectionRequest req = new ConnectionRequest() {
                @Override
                protected void handleErrorResponseCode(int code, String message) {
                }
            };
            req.setPost(false);
            req.setHttpMethod("GET");
            req.setReadResponseForErrors(true);

            req.setDisposeOnCompletion(new InfiniteProgress().showInifiniteBlocking());
            req.setUrl(API.VISITOR + "&mobile=" + tMobile);

            NetworkManager.getInstance().addToQueueAndWait(req);

            Map<String, Object> response = new JSONParser().parseJSON(new InputStreamReader(new ByteArrayInputStream(req.getResponseData()), "UTF-8"));

            if (response.get("message") != null) {
                Dialog.show("Error", response.get("message").toString(), "OK", null);
            } else if (response.get("name") != null) {
                QR = response.get("qr").toString();
                name = response.get("name").toString();
                email = response.get("email").toString();
                workshop = (response.get("workshop") == null) ? "-" : response.get("workshop").toString();
                mobile = response.get("mobile").toString();

                coupon = (response.get("coupon") == null) ? "-" : response.get("coupon").toString();
                edu = response.get("education").toString();
                vDay = response.get("day").toString();
                gender = (response.get("gender").toString().equals("0")) ? "Female" : "Male";
                birth = response.get("birthdate").toString();
                isHeIn = response.get("isHeIn").toString();

                showForm("Visitor", null);
            } else {
                Dialog.show("Error", "Not found", "OK", null);
            }
        } catch (Exception ex) {
            Dialog.show("Error", "Connection failure", "OK", null);
            System.out.println(ex.toString());
        }
    }

    @Override
    protected void onVisitor_VCeckInAction(Component c, ActionEvent event) {
        checkReq(3, QR, day);

    }

    @Override
    protected void onVisitor_NewQRAction(Component c, ActionEvent event) {

        newQr();
    }

    @Override
    protected void beforeVisitor(Form f) {
        findVEdu().setText(edu);
        findVEmail().setText(email);
        findVName().setText(name);
        findVWorkshop().setText(workshop);
        findVMobile().setText(mobile);
        findVCoupon().setText(coupon);
        findVday().setText(vDay);
        findVBdate().setText(birth);
        findVGender().setText(gender);
        findVIsHeIn().setText(isHeIn);

    }

    @Override
    protected void beforeMain(Form f) {

        if (Preferences.get("day", null) != null) {
            if (Preferences.get("day", null).equals("1")) {
                findDay1(f).setSelected(true);
                Preferences.set("day", "1");
                day = Preferences.get("day", null);
            } else {
                findDay2(f).setSelected(true);
                Preferences.set("day", "2");
                day = Preferences.get("day", null);
            }
        } else {
            findDay2(f).setSelected(true);
            findDay1(f).setSelected(true);
            Preferences.set("day", "1");
            day = Preferences.get("day", null);
        }

    }

    @Override
    protected void onMain_Day1Action(Component c, ActionEvent event) {

        Preferences.set("day", "1");
        day = Preferences.get("day", null);
    }

    @Override
    protected void onMain_Day2Action(Component c, ActionEvent event) {

        Preferences.set("day", "2");
        day = Preferences.get("day", null);
    }

    @Override
    protected void onCreateMain() {

    }

    @Override
    protected void postMain(Form f) {

    }

    @Override
    protected void onVisitor_VcheckOutAction(Component c, ActionEvent event) {
        checkReq(1, QR, day);

    }
}
